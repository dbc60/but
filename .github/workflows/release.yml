name: Release BUT

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allows manual triggering for testing

jobs:
  build-and-release:
    runs-on: windows-latest

    strategy:
      matrix:
        platform: [x64, x86]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Visual Studio environment
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: ${{ matrix.platform }}

    - name: Setup VS Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.platform }}

    - name: Build BUT project (debug, ${{ matrix.platform }})
      run: |
        .\build\cmd\all.cmd debug ${{ matrix.platform }} build
      shell: cmd

    - name: Build BUT project (release, ${{ matrix.platform }})
      run: |
        .\build\cmd\all.cmd release ${{ matrix.platform }} build
      shell: cmd

    - name: Get version from tag
      id: get_version
      run: |
        if ($env:GITHUB_REF -match "refs/tags/(.*)") {
          $version = $matches[1]
        } else {
          $version = "dev-$($env:GITHUB_SHA.Substring(0,7))"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
      shell: powershell

    - name: Create SDK package
      id: create_package
      run: |
        $projectName = "but"
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $platform = "windows"
        $arch = "${{ matrix.platform }}"
        $sdkZipName = "$projectName-sdk-$version-$platform-$arch.zip"

        # ===== Create SDK Package =====
        New-Item -ItemType Directory -Path "release-sdk" -Force
        New-Item -ItemType Directory -Path "release-sdk/debug/bin" -Force
        New-Item -ItemType Directory -Path "release-sdk/debug/lib" -Force
        New-Item -ItemType Directory -Path "release-sdk/release/bin" -Force
        New-Item -ItemType Directory -Path "release-sdk/release/lib" -Force
        New-Item -ItemType Directory -Path "release-sdk/include" -Force
        New-Item -ItemType Directory -Path "release-sdk/examples" -Force

        # Copy debug build artifacts
        Get-ChildItem -Path "target" -Recurse -Filter "but.exe" | Where-Object { $_.FullName -match "\\debug\\.*\\bin" } | Copy-Item -Destination "release-sdk/debug/bin/"
        Get-ChildItem -Path "target" -Recurse -Filter "*.dll" | Where-Object { $_.FullName -match "\\debug\\.*\\bin" } | Copy-Item -Destination "release-sdk/debug/bin/"
        Get-ChildItem -Path "target" -Recurse -Filter "but.lib" | Where-Object { $_.FullName -match "\\debug\\.*\\lib" } | Copy-Item -Destination "release-sdk/debug/lib/"

        # Copy release build artifacts
        Get-ChildItem -Path "target" -Recurse -Filter "but.exe" | Where-Object { $_.FullName -match "\\release\\.*\\bin" } | Copy-Item -Destination "release-sdk/release/bin/"
        Get-ChildItem -Path "target" -Recurse -Filter "*.dll" | Where-Object { $_.FullName -match "\\release\\.*\\bin" } | Copy-Item -Destination "release-sdk/release/bin/"
        Get-ChildItem -Path "target" -Recurse -Filter "but.lib" | Where-Object { $_.FullName -match "\\release\\.*\\lib" } | Copy-Item -Destination "release-sdk/release/lib/"

        # Copy header files
        Get-ChildItem -Path "target" -Recurse -Filter "*.h" | Where-Object { $_.Directory.Name -eq "inc" } | Copy-Item -Destination "release-sdk/include/"

        # Copy example test suite source
        if (Test-Path "src/exception_butts.c") { Copy-Item "src/exception_butts.c" "release-sdk/examples/" }

        # Add documentation files
        if (Test-Path "README.md") { Copy-Item "README.md" "release-sdk/" }
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" "release-sdk/" }
        if (Test-Path "CHANGELOG.md") { Copy-Item "CHANGELOG.md" "release-sdk/" }

        # Create the SDK zip file
        Compress-Archive -Path "release-sdk/*" -DestinationPath $sdkZipName
        Remove-Item -Recurse -Force "release-sdk"
        echo "Created SDK package: $sdkZipName"

        # Output filename for use in release step
        echo "SDK_ZIP_NAME=$sdkZipName" >> $env:GITHUB_OUTPUT
      shell: powershell

    - name: Upload SDK package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.create_package.outputs.SDK_ZIP_NAME }}
        path: ${{ steps.create_package.outputs.SDK_ZIP_NAME }}
        retention-days: 1  # Short retention since we'll create a release

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-artifacts/**/*.zip
        tag_name: ${{ github.ref_name }}
        name: BUT ${{ github.ref_name }}
        body: |
          ## BUT ${{ github.ref_name }}

          Basic Unit Test (BUT) is a C unit test framework with setjmp/longjmp-based exception handling.

          ### Downloads
          Complete SDK packages (includes everything you need to develop and run test suites):
          - `but-sdk-${{ github.ref_name }}-windows-x64.zip` - 64-bit Windows
          - `but-sdk-${{ github.ref_name }}-windows-x86.zip` - 32-bit Windows

          ### Package Contents
          Each SDK package includes both debug and release configurations:
          - **Debug Runtime**: `debug/bin/but.exe` - Test driver executable (debug build)
          - **Debug Library**: `debug/lib/but.lib` - Static library for linking (debug build)
          - **Release Runtime**: `release/bin/but.exe` - Test driver executable (release build)
          - **Release Library**: `release/lib/but.lib` - Static library for linking (release build)
          - **Headers**: `include/*.h` - All public headers (but.h, but_assert.h, exception.h, etc.)
          - **Examples**: Example test suite DLLs and source code (both debug and release)
          - **Documentation**: README, LICENSE

          ### Quick Start

          **1. Extract the SDK:**
          ```
          unzip but-sdk-${{ github.ref_name }}-windows-x64.zip
          cd but-sdk-${{ github.ref_name }}-windows-x64
          ```

          **2. Try the examples:**
          ```cmd
          REM Run debug examples
          debug\bin\but.exe debug\bin\exception_butts.dll

          REM Run release examples
          release\bin\but.exe release\bin\exception_butts.dll
          ```

          **3. Write your own tests:**
          ```c
          #include <but.h>
          #include <but_assert.h>

          BUT_TEST("My Test", my_test) {
              BUT_ASSERT_EQ_INT(42, compute_answer());
          }

          BUT_SUITE_BEGIN(my_suite)
              BUT_SUITE_ADD(my_test)
          BUT_SUITE_END;

          BUT_GET_TEST_SUITE("My Tests", my_suite);
          ```

          **4. Build and run (debug):**
          ```cmd
          cl /I"path\to\sdk\include" /DDLL_BUILD /Od /Zi my_tests.c /LD /link "path\to\sdk\debug\lib\but.lib"
          path\to\sdk\debug\bin\but.exe my_tests.dll
          ```

          **4. Build and run (release):**
          ```cmd
          cl /I"path\to\sdk\include" /DDLL_BUILD /O2 my_tests.c /LD /link "path\to\sdk\release\lib\but.lib"
          path\to\sdk\release\bin\but.exe my_tests.dll
          ```
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') || startsWith(github.ref_name, 'v0.') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
