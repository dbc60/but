name: Release BUT

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allows manual triggering for testing

jobs:
  build-and-release:
    runs-on: windows-latest

    strategy:
      matrix:
        platform: [x64, x86]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Visual Studio environment
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: ${{ matrix.platform }}

    - name: Setup VS Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.platform }}

    - name: Build BUT project (release, ${{ matrix.platform }})
      run: |
        .\build\cmd\all.cmd release ${{ matrix.platform }} build
      shell: cmd

    - name: Get version from tag
      id: get_version
      run: |
        if ($env:GITHUB_REF -match "refs/tags/(.*)") {
          $version = $matches[1]
        } else {
          $version = "dev-$($env:GITHUB_SHA.Substring(0,7))"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
      shell: powershell

    - name: Create release package
      id: create_package
      run: |
        $projectName = "but"
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $platform = "windows"
        $arch = "${{ matrix.platform }}"
        $zipName = "$projectName-$version-$platform-$arch.zip"

        # Create a temporary directory for the release files
        New-Item -ItemType Directory -Path "release-temp" -Force

        # Find and copy the built executable and any DLLs
        Get-ChildItem -Path "target" -Recurse -Filter "but.exe" | Where-Object { $_.Directory.Name -eq "bin" } | Copy-Item -Destination "release-temp/"
        Get-ChildItem -Path "target" -Recurse -Filter "*.dll" | Where-Object { $_.Directory.Name -eq "bin" } | Copy-Item -Destination "release-temp/"

        # Add documentation files if they exist
        if (Test-Path "README.md") { Copy-Item "README.md" "release-temp/" }
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" "release-temp/" }
        if (Test-Path "CHANGELOG.md") { Copy-Item "CHANGELOG.md" "release-temp/" }

        # Create the zip file
        Compress-Archive -Path "release-temp/*" -DestinationPath $zipName

        # Clean up temp directory
        Remove-Item -Recurse -Force "release-temp"

        # Output the filename for use in release step
        echo "ZIP_NAME=$zipName" >> $env:GITHUB_OUTPUT
        echo "Created package: $zipName"
      shell: powershell

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.create_package.outputs.ZIP_NAME }}
        path: ${{ steps.create_package.outputs.ZIP_NAME }}
        retention-days: 1  # Short retention since we'll create a release

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-artifacts/**/*.zip
        tag_name: ${{ github.ref_name }}
        name: BUT ${{ github.ref_name }}
        body: |
          ## BUT ${{ github.ref_name }}

          ### Downloads
          - `but-${{ github.ref_name }}-windows-x64.zip` - 64-bit Windows version
          - `but-${{ github.ref_name }}-windows-x86.zip` - 32-bit Windows version

          ### Installation
          1. Download the appropriate zip file for your system
          2. Extract the contents to your desired location
          3. Run `but.exe`
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') || startsWith(github.ref_name, 'v0.') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
