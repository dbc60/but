name: Release BUT

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allows manual triggering for testing

jobs:
  build-and-release:
    runs-on: windows-latest

    strategy:
      matrix:
        platform: [x64, x86]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Visual Studio environment
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: ${{ matrix.platform }}

    - name: Setup VS Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.platform }}

    - name: Build BUT project (release, ${{ matrix.platform }})
      run: |
        .\build\cmd\all.cmd release ${{ matrix.platform }} build
      shell: cmd

    - name: Get version from tag
      id: get_version
      run: |
        if ($env:GITHUB_REF -match "refs/tags/(.*)") {
          $version = $matches[1]
        } else {
          $version = "dev-$($env:GITHUB_SHA.Substring(0,7))"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
      shell: powershell

    - name: Create release packages
      id: create_package
      run: |
        $projectName = "but"
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $platform = "windows"
        $arch = "${{ matrix.platform }}"
        $runtimeZipName = "$projectName-$version-$platform-$arch.zip"
        $sdkZipName = "$projectName-sdk-$version-$platform-$arch.zip"

        # ===== Create Runtime Package =====
        New-Item -ItemType Directory -Path "release-runtime" -Force

        # Find and copy the built executable and test suite DLLs
        Get-ChildItem -Path "target" -Recurse -Filter "but.exe" | Where-Object { $_.Directory.Name -eq "bin" } | Copy-Item -Destination "release-runtime/"
        Get-ChildItem -Path "target" -Recurse -Filter "*.dll" | Where-Object { $_.Directory.Name -eq "bin" } | Copy-Item -Destination "release-runtime/"

        # Add documentation files if they exist
        if (Test-Path "README.md") { Copy-Item "README.md" "release-runtime/" }
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" "release-runtime/" }
        if (Test-Path "CHANGELOG.md") { Copy-Item "CHANGELOG.md" "release-runtime/" }

        # Create the runtime zip file
        Compress-Archive -Path "release-runtime/*" -DestinationPath $runtimeZipName
        Remove-Item -Recurse -Force "release-runtime"
        echo "Created runtime package: $runtimeZipName"

        # ===== Create SDK Package =====
        New-Item -ItemType Directory -Path "release-sdk" -Force
        New-Item -ItemType Directory -Path "release-sdk/lib" -Force
        New-Item -ItemType Directory -Path "release-sdk/include" -Force
        New-Item -ItemType Directory -Path "release-sdk/examples" -Force

        # Copy static library
        Get-ChildItem -Path "target" -Recurse -Filter "but.lib" | Where-Object { $_.Directory.Name -eq "lib" } | Copy-Item -Destination "release-sdk/lib/"

        # Copy header files
        Get-ChildItem -Path "target" -Recurse -Filter "*.h" | Where-Object { $_.Directory.Name -eq "inc" } | Copy-Item -Destination "release-sdk/include/"

        # Copy example test suite source
        if (Test-Path "src/exception_butts.c") { Copy-Item "src/exception_butts.c" "release-sdk/examples/" }

        # Add documentation files
        if (Test-Path "README.md") { Copy-Item "README.md" "release-sdk/" }
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" "release-sdk/" }
        if (Test-Path "CHANGELOG.md") { Copy-Item "CHANGELOG.md" "release-sdk/" }

        # Create the SDK zip file
        Compress-Archive -Path "release-sdk/*" -DestinationPath $sdkZipName
        Remove-Item -Recurse -Force "release-sdk"
        echo "Created SDK package: $sdkZipName"

        # Output filenames for use in release step
        echo "RUNTIME_ZIP_NAME=$runtimeZipName" >> $env:GITHUB_OUTPUT
        echo "SDK_ZIP_NAME=$sdkZipName" >> $env:GITHUB_OUTPUT
      shell: powershell

    - name: Upload runtime package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.create_package.outputs.RUNTIME_ZIP_NAME }}
        path: ${{ steps.create_package.outputs.RUNTIME_ZIP_NAME }}
        retention-days: 1  # Short retention since we'll create a release

    - name: Upload SDK package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.create_package.outputs.SDK_ZIP_NAME }}
        path: ${{ steps.create_package.outputs.SDK_ZIP_NAME }}
        retention-days: 1  # Short retention since we'll create a release

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-artifacts/**/*.zip
        tag_name: ${{ github.ref_name }}
        name: BUT ${{ github.ref_name }}
        body: |
          ## BUT ${{ github.ref_name }}

          Basic Unit Test (BUT) is a C unit test framework with setjmp/longjmp-based exception handling.

          ### Runtime Packages
          Download these to run existing test suites:
          - `but-${{ github.ref_name }}-windows-x64.zip` - 64-bit Windows version
          - `but-${{ github.ref_name }}-windows-x86.zip` - 32-bit Windows version

          **Contents**: `but.exe` test driver and example test suite DLLs

          ### SDK Packages
          Download these to develop your own test suites:
          - `but-sdk-${{ github.ref_name }}-windows-x64.zip` - 64-bit Windows SDK
          - `but-sdk-${{ github.ref_name }}-windows-x86.zip` - 32-bit Windows SDK

          **Contents**:
          - `but.lib` - Static library to link with your test suites
          - Header files (but.h, but_assert.h, exception.h, etc.)
          - Example test suite source code

          ### Quick Start

          **Using the Runtime:**
          1. Download and extract the runtime package
          2. Run: `but.exe your_test_suite.dll`

          **Developing Test Suites:**
          1. Download and extract the SDK package
          2. Include headers: `#include <but.h>`, `#include <but_assert.h>`
          3. Write tests using `BUT_TEST` macros
          4. Compile as DLL with `/DDLL_BUILD` and link against `but.lib`
          5. Run with `but.exe your_test_suite.dll`
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') || startsWith(github.ref_name, 'v0.') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
